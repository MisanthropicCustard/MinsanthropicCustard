'use strict';

// require('babel-register');

var env = process.env;
var NODE_ENV = process.env.NODE_ENV;
var isDev = NODE_ENV === 'development';
var isTest = NODE_ENV === 'test';

var webpack = require('webpack');
var marked = require('marked');
var fs = require('fs');
var path = require('path'),
    join = path.join,
    resolve = path.resolve;

var root = resolve(__dirname);
var src = join(root, 'src');
var examples = join(root, 'examples');
var modules = join(root, 'node_modules');
var dest = join(root, 'public');

var getConfig = require('hjs-webpack');

var config = getConfig({
  isDev: isDev,
  in: join(examples, 'index.js'),
  out: dest,
  clearBeforeBuild: true,
  html: function html(context, cb) {
    context.publicPath = isDev ? 'http://localhost:3000/' : '';

    fs.readFile(join(root, 'README.md'), function (err, data) {
      if (err) {
        return cb(err);
      }
      cb(null, {
        'index.html': context.defaultTemplate()
      });
    });
  }
});

var dotenv = require('dotenv');
var envVariables = dotenv.config();

// Converts keys to be surrounded with __
var defines = Object.keys(envVariables).reduce(function (memo, key) {
  var val = JSON.stringify(envVariables[key]);
  memo['__' + key.toUpperCase() + '__'] = val;
  return memo;
}, {
  __NODE_ENV__: JSON.stringify(env.NODE_ENV),
  __IS_DEV__: isDev
});

config.externals = {
  'window.google': true
};

// Setup css modules require hook so it works when building for the server
var cssModulesNames = (isDev ? '[path][name]__[local]__' : '') + '[hash:base64:5]';
var matchCssLoaders = /(^|!)(css-loader)($|!)/;

var findLoader = function findLoader(loaders, match, fn) {
  var found = loaders.filter(function (l) {
    return l && l.loader && l.loader.match(match);
  });
  return found ? found[0] : null;
};

var cssloader = findLoader(config.module.loaders, matchCssLoaders);
var newloader = Object.assign({}, cssloader, {
  test: /\.module\.css$/,
  include: [src, examples],
  loader: cssloader.loader.replace(matchCssLoaders, '$1$2?modules&localIdentName=' + cssModulesNames + '$3')
});
config.module.loaders.push(newloader);
cssloader.test = new RegExp('[^module]' + cssloader.test.source);
cssloader.loader = 'style!css!postcss';

cssloader.include = [src, examples];

config.module.loaders.push({
  test: /\.css$/,
  include: [modules],
  loader: 'style!css'
});

config.plugins = [new webpack.DefinePlugin(defines)].concat(config.plugins);

config.postcss = [].concat([require('precss')({}), require('autoprefixer')({}), require('cssnano')({})]);

module.exports = config;
//# sourceMappingURL=data:application/json;base64,